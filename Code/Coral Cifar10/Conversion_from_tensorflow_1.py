# -*- coding: utf-8 -*-
"""Conversioni Partendo da TF1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y-8vbHwbE-VX04f13xVlJuhrEgCJT3iV
"""

#FROM pb to FROZEN GRAPH

from tensorflow.python.tools import freeze_graph
from tensorflow.python.saved_model import tag_constants

input_graph_filename = None
input_saved_model_dir = savedir
output_node_names = "softmax_tensor"
output_graph_filename = os.path.join(savedir, "frozen.pb") 
input_binary = False
input_saver_def_path = False
restore_op_name = None
filename_tensor_name = None
clear_devices = True
input_meta_graph = False
checkpoint_path = None

saved_model_tags = tag_constants.SERVING

freeze_graph.freeze_graph(input_graph_filename, input_saver_def_path,
                            input_binary, checkpoint_path, output_node_names,
                              restore_op_name, filename_tensor_name,
                              output_graph_filename, clear_devices, "", "", "",
                              input_meta_graph, input_saved_model_dir,
                            saved_model_tags)

#TOCO COMMAND LINE

toco \
--input_file=frozen.pb \
--output_file=tflite_model.tflite \
--input_format=TENSORFLOW_GRAPHDEF \
--output_format=TFLITE \
--inference_type=QUANTIZED_UINT8 \
--input_shape="1,32,32,3" \
--input_array=model_input/input \
--output_array=softmax_tensor \
--std_dev_values=127 \
--mean_value=127 \
--default_ranges_min=0 \
--default_ranges_max=6

#File to create for inference

import argparse
import io
import time
from datetime import datetime
import numpy as np

from PIL import Image, ImageDraw, ImageFont

from edgetpu.classification.engine import ClassificationEngine

def main():
    
    parser = argparse.ArgumentParser()
    parser.add_argument(
      '--model', help='File path of Tflite model.', required=True)
    parser.add_argument(
      '--image', help='File path of file.', required=True)
    args = parser.parse_args()
    
    label_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']
    img = Image.open(args.image)
    #np_image = np.array(img)

    # Load Engine
    engine = ClassificationEngine(args.model)

    lap_time = time.time()

    # Run inference. 
    for result in engine.ClassifyWithImage(img, top_k=3):
        print ('---------------------------')
        print (label_names[result[0]])
        print ('Score : ', result[1])

    previous_time = lap_time
    lap_time = time.time()
    print("Elapsed time for the last inference: ", lap_time - previous_time)


if __name__ == '__main__':
    main()    

#Inference command

python3 Cifar.py \
--model models/tflite_model_edgetpu.tflite \
--image/parrot.jpg